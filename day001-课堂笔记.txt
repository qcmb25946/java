DOS命令：
1.exit	退出命令窗口
2.cls	清屏
3.dir	列出当前路径内容
4.cd	切换目录
5.切换盘符	盘符:

java文件必须用.java结尾的扩展名

javac.exe	编译
java.exe	运行

注释
1.单行注释
//单行注释

2.多行注释
/*多行注释
  多行注释
  多行注释
*/

3.javadoc注释0
/*多行注释
* 多行注释
* 多行注释
*/

public	公开的
class	类
public class 文件名(类名){
	类体
	static	静态的
	void	空
	main	方法名
	(String[] args)		main方法的形式参数列表
	args	变量名
	public static void main(String[] args){
	程序内容
		System.out.println("hello world!");
	}
}
public class	一个源文件只能定义一个类名与文件名相同
class		一个源文件可以定义无数类名 一个class会生成一个.class文件
每个class当中可以编写main方法 都可以设置程序入口


标识符

1.定义
	1-在源文件能自己命名的是标识符
	2-在editplus中黑色的字体为标识符
	3-标识符识别元素有：
		- 类名
		- 方法名
		- 变量名
		- 接口名
		- 常量名
		.....

2.规则
不遵守规则编译报错
	1-标识符只能由数字、字母、下划线、美元符号组成
	2-标识符不能以数字开头
	3-严格区分大小写
	4-关键字不能做标识符

3-规范
不遵守规范编译不会报错
	1-最好见名知意
	2-遵守驼峰命名方式
	3-类名、接口名首字母大写 后面每个单词首字母大写
	4-变量名、方法名首字母小写 后面每个单词首字母大写
	5-常量名每个字母大写

关键字

1.定义
	1-在java语言编程的时候，在关键地方使用的单词，体现出特殊的含义
	2-这些单词都是事先定义好的
	3-关键字都是小写


字面值

1.定义
	1-字面值就是数据
	2-数据在现实世界中是分门别类的，在所以编程语言中也有类型
		- 1 2 3		属于整数型字面值
		- 3.14 2.88	属于浮点型字面值
		- true false	属于布尔型字面值
		- "你好"	属于字符串型字面值
		- 'A' '我'	属于字符型字面值

2.注意：
	1-字符串字面值必须使用双引号阔起来
	2-字符型字面值必须使用单引号阔起来，而且只能单个字符

变量

1.定义
	1-占用内存一块空间 存放"有数据类型" "有名字" "有字面值"
	2-变量包含：
		- 数据类型
		- 名字
		- 字面值

2.规则
	1-声明赋值可以一起完成
	2-变量赋值之后可以重新赋值，变量值可以变化
	3-有了变量的概念之后，内存空间可以重复使用
	4-变量可以声明多个
	5-变量必须先声明再赋值才能访问
	6-在java代码中从上往下执行 逐行执行】
	7-变量要求 变量存储的"数据"必须和变量的"数据类型"一致，当不一致编译报错
	8-定义变量格式
		- 数据类型 变量名
			-变量名：合法标识符。规范要求:首字母小写，后面单词首字母大写
	5.变量声明之后怎么赋值？
		- 语法格式：变量名 = 字面值；
		- 字面值的数据类型必须和变量的数据类型一致
		- "=" 是赋值运算符. 先运算等号右边的表达式，然后赋值给左边的变量。
	6.访问变量有两种方式：
		-读取变量中保存的具体数据 get：获取
		-修改变量中保存的具体数据 set：设置


3.变量的作用域
	1-变量的作用域描述变量的有效范围 在有效范围内可以访问 不在有效范围内无法访问
	2-变量的作用域出了大括号就不认识了
	3-同一个变量只能声明一次，赋值多次
	4-访问变量遵循就近原则

4.关于变量的分类
根据变量声明的位置分类
	1.局部变量
		- 在方法体内声明的变量
	2.成员变量
		- 在方法体外在类体内声明的变量
		- static 成员变量

数据类型

1.数据类型的作用
	1-程序当中有很多数据类型，每个数据都是有相关类型的，不同数据类型的数据占用不同大小空间
	2-数据类型的作用 指导JVM在运行程序中给数据分配多大内存空间

2.java数据类型分为两种
	1-基本数据类型
	2-引用数据类型
		- 类
		- 接口
		- 数组
		......

3基本数据类型分为4大类8小种
    第一类：整数型
        byte；short；int；long
    第二类：浮点型
        float；double
    第三类：布尔型
        boolean
    第四类：字符型
       char

4.字符串不属于基本数据类型；属于引用数据类型；字符属于基本数据类型
	- 字符串使用双引号
	- 字符使用单引号



5.八种数据类型占用空间大小
基本数据类型        占用空间大小［单位：字节］
-----------------------------------------------
byte			1
short			2
int			4
long			8
float			4
double			8
boolean			1
char			2

6.八种基本数据类型的取值范围
类型	取值范围	默认值
-----------------------------------------------------------------
byte	(-128-127)	0
short	(-32768-32767)	0
int			0
long			0
float			0.0
double			0.0
foolean	(true/false)	false（false是0；true是1）
char	(0-65535)	\u0000
八种数据类型一切向0看齐
注意：short和char所表示的总数一样，char能表达更大的正整数
成员变量没有赋值系统自动赋值


7.计算机在任何情况下只能识别二进制(0;1)
现在计算机采用交流电方式 接通和断开两种状态

8.二进制是表示形式，十进制满十进一，二进制满二进一

9.字节
    1 Byte（字节） = 8 bit（比特位）
    1个比特位表示一个二进制位 1或0
    1 KB = 1024 Byte
    1 MB = 1024 KB
    1 GB = 1024 MB
    1 TB = 1024 GB

10.byte的取值范围
     1-数字都是有正负之分，所以在数字的二进制当中有一个二进制被称为"字符位"；并且这个"字符位"在二进制位的最左边 0是整数 1是负数
     2-byte类型最大值：01111111= 127
     3-byte类型最小值：-128
     4-byte类型可以表示256的不同数字

11.二进制与字符对照关系叫做字符编码
	1-java语言采用unicode编码方式
	2-标识符可以写中文
	3-实际开发一般使用UTF-8


1.字符型(char)
	char类型可以存储一个中文字符或一个英文字符
	"\"	转义不算字符
	\n	换行
	\t	制表符/tab键

	System.out.println()	换行
	System.out.orint()	不换行

2.整数型
	数据类型	占用大小	默认值	取值范围
	-------------------------------------------------
	byte		1		0	[-128 ~ 127]
	short		2		0	[-32768 ~ 32767]
	int		4		0	[-2147483648 ~ 2147483647]
	long		8		0L	

	整数型字面值三种表示方法
	十进制		默认就行
	八进制		以0开头
	十六进制	以0x开头

	- java默认吧整数类型当成int类型
	- 吧int类型当做long类型需要在字面值后面加L
	- 大容量类型转换小容量类型需要加“强制类型转换符” 编译通过候 运行阶段可能损失精度
	- 二进制由三种表达形式
		- 原码
		- 反码
		- 补码
	计算机在任何情况下表示底层或存储数据的时候采用补码形式
		正数的补码：与原码相同
		负数的补码：负数的绝对值应对的二进制码所以的二进制取反，再加1
		补码：10000000
		原码计算过程：
			10000000 - 1 --> 01111111
			二进制		十进制
			10000000 -->	128
			结果：-128
	- 只要整数字面值没有超过byte，short，char的取值范围，这个字面值可以直接用byte，short，int，long类型的变量 是为了方便程序员的编程

3.浮点型
	float 单精度 (4byte)
	double 双精度 (8byte，精度较高)
	double精度低，不适合财务软件
	为了程序员准备了精度更高的类型，只不过这种类型是一种引用数据类型；不属于基本数据类型 他是：java.math.BigDecimal
	java SE源码位置：(安装位置)\Java\jdk(版本号)\src.zip
	java SE字节码位置：(安装位置)\Java\jdk(版本号)\jre\lib\rt.jar
	(String[] args)中的String使用的就是String.class字节码文件
	java浮点数据类型默认用double类型来处理
	通过字面值当做float类型来处理，需要在字面值后面添加F/f
	double和float在计算机存储都是近似值

4.布尔型(boolean)
	在java语言中boolean只有两个值：true(1)；false(0)
	在底层存储只占用1个字节，因为实际存储的时候false底层是0；true底层是1，
	布尔类型经常使用在逻辑运算和条件控制语句当中
    
类型转换
	转换规则：
		1.八种数据类型除了布尔数据类型以外的数据类型都可以互相转换
		2.小容量向大容量转换，称为自动类型转换，容量从小到大排序
			byte < short < int < long < float < double
			char < 
			注：任何浮点类型不管占用多少个字节，都比整数型容量大
			char和short表示种类数量相同，但是char可以取更大的正整数
		3.大容量转换小容量，需要加强制类型转换符，程序编译才能通过，可能会损失进度；谨慎使用
		4.当整数字面值没有超过byte，chort，char的取值范围，可以直接赋值
		5.byte，short，char混合运算的时候，先转换成int类型再做运算
		6.多种数据类型混合运算时，先转换成容量最大的类型再做运算

运算符
	1.算数运算符
		+	求和
		-	差
		*	乘积
		/	商
		%	求余/求模

		++	自加1
		--	自减1

		注意：一个表达式有多个运算符，运算符优先级。不确定加括号
		不在赋值时；++运算符可以出现变量前或者变量后；结果都一样
		在赋值时；++在前先计算后赋值；++在后先赋值后计算

	2.关系运算符
		>	大于
		>=	大于等于
		<	小于
		<=	小于等于
		==	等于
		!=	不等于
		"=" 与 "=="不同 "="	赋值 "=="	等于

	3.逻辑运算符
		&	逻辑与【并且】（两边都为true：结果为true）
		|	逻辑或【或者】（一边都为true：结果为true）
		!	逻辑非（取反 !false 为true；!true为false，这是单项运算符）
		^	逻辑与或（两边结果不一样；结果就是true）

		&&	短路与
		||	段落或

		- 逻辑运算符要求两边算子都是布尔类型；他的结果为布尔类型
		- 短路与和逻辑与最终的运算结果是相同；只不过短路与存在短路现象
		- 短路或和逻辑或最终的运算结果是相同；只不过短路或存在短路现象
		- 短路与	左边为false 才会发生短路与
		- 短路或	左边为true 才会发生短路或
		- 短路与更加智能.由于后面的表达式可能不执行.所以执行效率较高
		- 要求运算符两边必须全部执行，此时必须使用逻辑与

	4.赋值类运算符
		赋值类包括两种：
		- 基本赋值运算符
			=
		- 扩展赋值运算符	
			+=
			-=
			*=	
			/=
			%=

		- 赋值类运算符优先级：先执行等号右边的表达式，将执行结果赋值给左边的变量
		- 扩展赋值运算符无论追加还是追减，最终数据类型不会改变

	5.字符串连接运算符
		- "+" 运算符在java语言中有两个作用：
			- 求和
			- 字符串连接运算

			- 当两边都是数字进行加法运算
			- 当一边是字符串类型进行字符串连接运算，结果是字符串类型


	6.条件运算符/三元运算符/三目运算符
		- 语法规则
			- 布尔表达式 ? 表达式1 : 表达式2
		
		- 三元运算符执行原理
			- 当布尔表达式的结果为true；选择表达式1作为整个表达式执行结果
			- 当布尔表达式的结果为false；选择表达式1作为整个表达式执行结果
